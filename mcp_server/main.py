# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:53:23+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query

from models import (
    Account,
    AccountsAuthInfoResponse,
    AccountsClaimWebsiteResponse,
    AccountsCustomBatchRequest,
    AccountsCustomBatchResponse,
    AccountsLinkRequest,
    AccountsLinkResponse,
    AccountsListResponse,
    AccountStatus,
    AccountstatusesCustomBatchRequest,
    AccountstatusesCustomBatchResponse,
    AccountstatusesListResponse,
    AccountTax,
    AccounttaxCustomBatchRequest,
    AccounttaxCustomBatchResponse,
    AccounttaxListResponse,
    Alt,
    Datafeed,
    DatafeedsCustomBatchRequest,
    DatafeedsCustomBatchResponse,
    DatafeedsFetchNowResponse,
    DatafeedsListResponse,
    DatafeedStatus,
    DatafeedstatusesCustomBatchRequest,
    DatafeedstatusesCustomBatchResponse,
    DatafeedstatusesListResponse,
    Destinations,
    FieldXgafv,
    LiaSettings,
    LiasettingsCustomBatchRequest,
    LiasettingsCustomBatchResponse,
    LiasettingsGetAccessibleGmbAccountsResponse,
    LiasettingsListPosDataProvidersResponse,
    LiasettingsListResponse,
    LiasettingsRequestGmbAccessResponse,
    LiasettingsRequestInventoryVerificationResponse,
    LiasettingsSetInventoryVerificationContactResponse,
    LiasettingsSetPosDataProviderResponse,
    MerchantOrderReturn,
    Order,
    OrderBy,
    OrderinvoicesCreateChargeInvoiceRequest,
    OrderinvoicesCreateChargeInvoiceResponse,
    OrderinvoicesCreateRefundInvoiceRequest,
    OrderinvoicesCreateRefundInvoiceResponse,
    OrderreportsListDisbursementsResponse,
    OrderreportsListTransactionsResponse,
    OrderreturnsListResponse,
    OrdersAcknowledgeRequest,
    OrdersAcknowledgeResponse,
    OrdersAdvanceTestOrderResponse,
    OrdersCancelLineItemRequest,
    OrdersCancelLineItemResponse,
    OrdersCancelRequest,
    OrdersCancelResponse,
    OrdersCancelTestOrderByCustomerRequest,
    OrdersCancelTestOrderByCustomerResponse,
    OrdersCreateTestOrderRequest,
    OrdersCreateTestOrderResponse,
    OrdersCreateTestReturnRequest,
    OrdersCreateTestReturnResponse,
    OrdersCustomBatchRequest,
    OrdersCustomBatchResponse,
    OrdersGetByMerchantOrderIdResponse,
    OrdersGetTestOrderTemplateResponse,
    OrdersInStoreRefundLineItemRequest,
    OrdersInStoreRefundLineItemResponse,
    OrdersListResponse,
    OrdersRefundRequest,
    OrdersRefundResponse,
    OrdersRejectReturnLineItemRequest,
    OrdersRejectReturnLineItemResponse,
    OrdersReturnLineItemRequest,
    OrdersReturnLineItemResponse,
    OrdersReturnRefundLineItemRequest,
    OrdersReturnRefundLineItemResponse,
    OrdersSetLineItemMetadataRequest,
    OrdersSetLineItemMetadataResponse,
    OrdersShipLineItemsRequest,
    OrdersShipLineItemsResponse,
    OrdersUpdateLineItemShippingDetailsRequest,
    OrdersUpdateLineItemShippingDetailsResponse,
    OrdersUpdateMerchantOrderIdRequest,
    OrdersUpdateMerchantOrderIdResponse,
    OrdersUpdateShipmentRequest,
    OrdersUpdateShipmentResponse,
    PosCustomBatchRequest,
    PosCustomBatchResponse,
    PosInventoryRequest,
    PosInventoryResponse,
    PosListResponse,
    PosSaleRequest,
    PosSaleResponse,
    PosStore,
    Product,
    ProductsCustomBatchRequest,
    ProductsCustomBatchResponse,
    ProductsListResponse,
    ProductStatus,
    ProductstatusesCustomBatchRequest,
    ProductstatusesCustomBatchResponse,
    ProductstatusesListResponse,
    ShippingSettings,
    ShippingsettingsCustomBatchRequest,
    ShippingsettingsCustomBatchResponse,
    ShippingsettingsGetSupportedCarriersResponse,
    ShippingsettingsGetSupportedHolidaysResponse,
    ShippingsettingsGetSupportedPickupServicesResponse,
    ShippingsettingsListResponse,
    Statuses,
    TemplateName,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com', 'x-twitter': 'youtube'},
    description='Manage your product listings and accounts for Google Shopping',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Content API for Shopping',
    version='v2',
    servers=[{'url': 'https://shoppingcontent.googleapis.com/content/v2'}],
)


@app.get(
    '/accounts/authinfo',
    description=""" Returns information about the authenticated user. """,
    tags=['custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounts_authinfo(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/batch',
    description=""" Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request. """,
    tags=['custom_batch_operations', 'account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounts_custombatch(
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: AccountsCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accountstatuses/batch',
    description=""" Retrieves multiple Merchant Center account statuses in a single request. """,
    tags=['account_status_handling', 'custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accountstatuses_custombatch(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: AccountstatusesCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounttax/batch',
    description=""" Retrieves and updates tax settings of multiple accounts in a single request. """,
    tags=['account_tax_management', 'custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounttax_custombatch(
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: AccounttaxCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datafeeds/batch',
    description=""" Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request. """,
    tags=['custom_batch_operations', 'datafeed_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeeds_custombatch(
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: DatafeedsCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datafeedstatuses/batch',
    description=""" Gets multiple Merchant Center datafeed statuses in a single request. """,
    tags=['custom_batch_operations', 'datafeed_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeedstatuses_custombatch(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: DatafeedstatusesCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/liasettings/batch',
    description=""" Retrieves and/or updates the LIA settings of multiple accounts in a single request. """,
    tags=['custom_batch_operations', 'local_inventory_ads_settings'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_custombatch(
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: LiasettingsCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/liasettings/posdataproviders',
    description=""" Retrieves the list of POS data providers that have active settings for the all eiligible countries. """,
    tags=['custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_listposdataproviders(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orders/batch',
    description=""" Retrieves or modifies multiple orders in a single request. """,
    tags=['custom_batch_operations', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_custombatch(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/pos/batch',
    description=""" Batches multiple POS-related calls in a single request. """,
    tags=['custom_batch_operations', 'pos_custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_pos_custombatch(
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: PosCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/products/batch',
    description=""" Retrieves, inserts, and deletes multiple products in a single request. """,
    tags=['custom_batch_operations', 'product_listing_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_products_custombatch(
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: ProductsCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/productstatuses/batch',
    description=""" Gets the statuses of multiple products in a single request. """,
    tags=['custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_productstatuses_custombatch(
    include_attributes: Optional[bool] = Query(None, alias='includeAttributes'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: ProductstatusesCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/shippingsettings/batch',
    description=""" Retrieves and updates the shipping settings of multiple accounts in a single request. """,
    tags=['custom_batch_operations', 'shipping_configuration_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_shippingsettings_custombatch(
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: ShippingsettingsCustomBatchRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/accounts',
    description=""" Lists the sub-accounts in your Merchant Center account. """,
    tags=['account_management', 'datafeed_management', 'content_data_feeds_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounts_list(
    merchant_id: str = Path(..., alias='merchantId'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/accounts',
    description=""" Creates a Merchant Center sub-account. """,
    tags=[
        'account_management',
        'account_status_handling',
        'account_tax_management',
        'datafeed_management',
        'custom_batch_operations',
        'local_inventory_ads_settings',
        'shipping_configuration_management',
        'order_processing',
        'pos_custom_batch_operations',
        'content_data_feeds_management',
        'content_local_ads_settings',
        'content_order_management_system',
        'order_transaction_reports',
        'point_of_sale_operations',
        'product_listing_management',
        'test_order_creation_and_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounts_insert(
    merchant_id: str = Path(..., alias='merchantId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Account = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{merchantId}/accounts/{accountId}',
    description=""" Deletes a Merchant Center sub-account. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounts_delete(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    force: Optional[bool] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/accounts/{accountId}',
    description=""" Retrieves a Merchant Center account. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounts_get(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{merchantId}/accounts/{accountId}',
    description=""" Updates a Merchant Center account. Any fields that are not provided are deleted from the resource. """,
    tags=['account_management', 'account_status_handling', 'custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounts_update(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Account = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/accounts/{accountId}/claimwebsite',
    description=""" Claims the website of a Merchant Center sub-account. """,
    tags=['account_management', 'account_status_handling', 'account_tax_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounts_claimwebsite(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    overwrite: Optional[bool] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/accounts/{accountId}/link',
    description=""" Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounts_link(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: AccountsLinkRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/accountstatuses',
    description=""" Lists the statuses of the sub-accounts in your Merchant Center account. """,
    tags=[
        'account_management',
        'account_status_handling',
        'shipping_configuration_management',
        'content_order_management_system',
        'content_data_feeds_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accountstatuses_list(
    merchant_id: str = Path(..., alias='merchantId'),
    destinations: Optional[Destinations] = None,
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/accountstatuses/{accountId}',
    description=""" Retrieves the status of a Merchant Center account. No itemLevelIssues are returned for multi-client accounts. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accountstatuses_get(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    destinations: Optional[Destinations] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/accounttax',
    description=""" Lists the tax settings of the sub-accounts in your Merchant Center account. """,
    tags=['account_management', 'order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounttax_list(
    merchant_id: str = Path(..., alias='merchantId'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/accounttax/{accountId}',
    description=""" Retrieves the tax settings of the account. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounttax_get(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{merchantId}/accounttax/{accountId}',
    description=""" Updates the tax settings of the account. Any fields that are not provided are deleted from the resource. """,
    tags=['account_tax_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_accounttax_update(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: AccountTax = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/datafeeds',
    description=""" Lists the configurations for datafeeds in your Merchant Center account. """,
    tags=[
        'account_management',
        'account_status_handling',
        'datafeed_management',
        'content_data_feeds_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeeds_list(
    merchant_id: str = Path(..., alias='merchantId'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/datafeeds',
    description=""" Registers a datafeed configuration with your Merchant Center account. """,
    tags=['datafeed_management', 'custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeeds_insert(
    merchant_id: str = Path(..., alias='merchantId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Datafeed = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{merchantId}/datafeeds/{datafeedId}',
    description=""" Deletes a datafeed configuration from your Merchant Center account. """,
    tags=[
        'datafeed_management',
        'custom_batch_operations',
        'content_data_feeds_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeeds_delete(
    merchant_id: str = Path(..., alias='merchantId'),
    datafeed_id: str = Path(..., alias='datafeedId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/datafeeds/{datafeedId}',
    description=""" Retrieves a datafeed configuration from your Merchant Center account. """,
    tags=['datafeed_management', 'content_data_feeds_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeeds_get(
    merchant_id: str = Path(..., alias='merchantId'),
    datafeed_id: str = Path(..., alias='datafeedId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{merchantId}/datafeeds/{datafeedId}',
    description=""" Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource. """,
    tags=[
        'datafeed_management',
        'content_data_feeds_management',
        'custom_batch_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeeds_update(
    merchant_id: str = Path(..., alias='merchantId'),
    datafeed_id: str = Path(..., alias='datafeedId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Datafeed = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/datafeeds/{datafeedId}/fetchNow',
    description=""" Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the Products service to update your product data. """,
    tags=['datafeed_management', 'content_data_feeds_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeeds_fetchnow(
    merchant_id: str = Path(..., alias='merchantId'),
    datafeed_id: str = Path(..., alias='datafeedId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/datafeedstatuses',
    description=""" Lists the statuses of the datafeeds in your Merchant Center account. """,
    tags=['account_management', 'account_status_handling', 'custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeedstatuses_list(
    merchant_id: str = Path(..., alias='merchantId'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/datafeedstatuses/{datafeedId}',
    description=""" Retrieves the status of a datafeed from your Merchant Center account. """,
    tags=['datafeed_management', 'content_data_feeds_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_datafeedstatuses_get(
    merchant_id: str = Path(..., alias='merchantId'),
    datafeed_id: str = Path(..., alias='datafeedId'),
    country: Optional[str] = None,
    language: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/liasettings',
    description=""" Lists the LIA settings of the sub-accounts in your Merchant Center account. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_list(
    merchant_id: str = Path(..., alias='merchantId'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/liasettings/{accountId}',
    description=""" Retrieves the LIA settings of the account. """,
    tags=['account_management', 'account_status_handling', 'account_tax_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_get(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{merchantId}/liasettings/{accountId}',
    description=""" Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource. """,
    tags=['local_inventory_ads_settings', 'account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_update(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: LiaSettings = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/liasettings/{accountId}/accessiblegmbaccounts',
    description=""" Retrieves the list of accessible Google My Business accounts. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_getaccessiblegmbaccounts(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/liasettings/{accountId}/requestgmbaccess',
    description=""" Requests access to a specified Google My Business account. """,
    tags=[
        'account_management',
        'custom_batch_operations',
        'content_local_ads_settings',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_requestgmbaccess(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    gmb_email: str = Query(..., alias='gmbEmail'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}',
    description=""" Requests inventory validation for the specified country. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_requestinventoryverification(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    country: str = ...,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/liasettings/{accountId}/setinventoryverificationcontact',
    description=""" Sets the inventory verification contract for the specified country. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_setinventoryverificationcontact(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    country: str = ...,
    language: str = ...,
    contact_name: str = Query(..., alias='contactName'),
    contact_email: str = Query(..., alias='contactEmail'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/liasettings/{accountId}/setposdataprovider',
    description=""" Sets the POS data provider for the specified country. """,
    tags=['account_management', 'account_status_handling', 'point_of_sale_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_liasettings_setposdataprovider(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    country: str = ...,
    pos_data_provider_id: Optional[str] = Query(None, alias='posDataProviderId'),
    pos_external_account_id: Optional[str] = Query(None, alias='posExternalAccountId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orderinvoices/{orderId}/createChargeInvoice',
    description=""" Creates a charge invoice for a shipment group, and triggers a charge capture for orderinvoice enabled orders. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orderinvoices_createchargeinvoice(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrderinvoicesCreateChargeInvoiceRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orderinvoices/{orderId}/createRefundInvoice',
    description=""" Creates a refund invoice for one or more shipment groups, and triggers a refund for orderinvoice enabled orders. This can only be used for line items that have previously been charged using `createChargeInvoice`. All amounts (except for the summary) are incremental with respect to the previous invoice. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orderinvoices_createrefundinvoice(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrderinvoicesCreateRefundInvoiceRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/orderreports/disbursements',
    description=""" Retrieves a report for disbursements from your Merchant Center account. """,
    tags=['order_transaction_reports'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orderreports_listdisbursements(
    merchant_id: str = Path(..., alias='merchantId'),
    disbursement_end_date: Optional[str] = Query(None, alias='disbursementEndDate'),
    disbursement_start_date: Optional[str] = Query(None, alias='disbursementStartDate'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/orderreports/disbursements/{disbursementId}/transactions',
    description=""" Retrieves a list of transactions for a disbursement from your Merchant Center account. """,
    tags=['order_transaction_reports'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orderreports_listtransactions(
    merchant_id: str = Path(..., alias='merchantId'),
    disbursement_id: str = Path(..., alias='disbursementId'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    transaction_end_date: Optional[str] = Query(None, alias='transactionEndDate'),
    transaction_start_date: Optional[str] = Query(None, alias='transactionStartDate'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/orderreturns',
    description=""" Lists order returns in your Merchant Center account. """,
    tags=['order_transaction_reports'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orderreturns_list(
    merchant_id: str = Path(..., alias='merchantId'),
    created_end_date: Optional[str] = Query(None, alias='createdEndDate'),
    created_start_date: Optional[str] = Query(None, alias='createdStartDate'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    order_by: Optional[OrderBy] = Query(None, alias='orderBy'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/orderreturns/{returnId}',
    description=""" Retrieves an order return from your Merchant Center account. """,
    tags=['content_order_management_system', 'order_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orderreturns_get(
    merchant_id: str = Path(..., alias='merchantId'),
    return_id: str = Path(..., alias='returnId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/orders',
    description=""" Lists the orders in your Merchant Center account. """,
    tags=[
        'content_order_management_system',
        'order_processing',
        'order_transaction_reports',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_list(
    merchant_id: str = Path(..., alias='merchantId'),
    acknowledged: Optional[bool] = None,
    max_results: Optional[int] = Query(None, alias='maxResults'),
    order_by: Optional[str] = Query(None, alias='orderBy'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    placed_date_end: Optional[str] = Query(None, alias='placedDateEnd'),
    placed_date_start: Optional[str] = Query(None, alias='placedDateStart'),
    statuses: Optional[Statuses] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/orders/{orderId}',
    description=""" Retrieves an order from your Merchant Center account. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_get(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/acknowledge',
    description=""" Marks an order as acknowledged. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_acknowledge(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersAcknowledgeRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/cancel',
    description=""" Cancels all line items in an order, making a full refund. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_cancel(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersCancelRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/cancelLineItem',
    description=""" Cancels a line item, making a full refund. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_cancellineitem(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersCancelLineItemRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/inStoreRefundLineItem',
    description=""" Deprecated. Notifies that item return and refund was handled directly by merchant outside of Google payments processing (e.g. cash refund done in store). Note: We recommend calling the returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the customer. This helps to prevent possible differences arising between merchant and Google transaction records. We also recommend having the point of sale system communicate with Google to ensure that customers do not receive a double refund by first refunding via Google then via an in-store return. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_instorerefundlineitem(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersInStoreRefundLineItemRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/refund',
    description=""" Deprecated, please use returnRefundLineItem instead. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_refund(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersRefundRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/rejectReturnLineItem',
    description=""" Rejects return on an line item. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_rejectreturnlineitem(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersRejectReturnLineItemRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/returnLineItem',
    description=""" Returns a line item. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_returnlineitem(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersReturnLineItemRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/returnRefundLineItem',
    description=""" Returns and refunds a line item. Note that this method can only be called on fully shipped orders. Please also note that the Orderreturns API is the preferred way to handle returns after you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search for the return, and then use Orderreturns.processreturn to issue the refund. If the return cannot be found, then we recommend using this API to issue a refund. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_returnrefundlineitem(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersReturnRefundLineItemRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/setLineItemMetadata',
    description=""" Sets (or overrides if it already exists) merchant provided annotations in the form of key-value pairs. A common use case would be to supply us with additional structured information about a line item that cannot be provided via other methods. Submitted key-value pairs can be retrieved as part of the orders resource. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_setlineitemmetadata(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersSetLineItemMetadataRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/shipLineItems',
    description=""" Marks line item(s) as shipped. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_shiplineitems(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersShipLineItemsRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/testreturn',
    description=""" Sandbox only. Creates a test return. """,
    tags=[
        'order_processing',
        'content_order_management_system',
        'test_order_creation_and_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_createtestreturn(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersCreateTestReturnRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/updateLineItemShippingDetails',
    description=""" Updates ship by and delivery by dates for a line item. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_updatelineitemshippingdetails(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersUpdateLineItemShippingDetailsRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/updateMerchantOrderId',
    description=""" Updates the merchant order ID for a given order. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_updatemerchantorderid(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersUpdateMerchantOrderIdRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/orders/{orderId}/updateShipment',
    description=""" Updates a shipment's status, carrier, and/or tracking ID. """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_updateshipment(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersUpdateShipmentRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/ordersbymerchantid/{merchantOrderId}',
    description=""" Retrieves an order using merchant order ID. """,
    tags=[
        'content_order_management_system',
        'order_processing',
        'order_transaction_reports',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_getbymerchantorderid(
    merchant_id: str = Path(..., alias='merchantId'),
    merchant_order_id: str = Path(..., alias='merchantOrderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/pos/{targetMerchantId}/inventory',
    description=""" Submit inventory for the given merchant. """,
    tags=[
        'account_management',
        'point_of_sale_operations',
        'custom_batch_operations',
        'pos_custom_batch_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_pos_inventory(
    merchant_id: str = Path(..., alias='merchantId'),
    target_merchant_id: str = Path(..., alias='targetMerchantId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: PosInventoryRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/pos/{targetMerchantId}/sale',
    description=""" Submit a sale event for the given merchant. """,
    tags=['pos_custom_batch_operations', 'point_of_sale_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_pos_sale(
    merchant_id: str = Path(..., alias='merchantId'),
    target_merchant_id: str = Path(..., alias='targetMerchantId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: PosSaleRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/pos/{targetMerchantId}/store',
    description=""" Lists the stores of the target merchant. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_pos_list(
    merchant_id: str = Path(..., alias='merchantId'),
    target_merchant_id: str = Path(..., alias='targetMerchantId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/pos/{targetMerchantId}/store',
    description=""" Creates a store for the given merchant. """,
    tags=[
        'account_management',
        'point_of_sale_operations',
        'pos_custom_batch_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_pos_insert(
    merchant_id: str = Path(..., alias='merchantId'),
    target_merchant_id: str = Path(..., alias='targetMerchantId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: PosStore = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{merchantId}/pos/{targetMerchantId}/store/{storeCode}',
    description=""" Deletes a store for the given merchant. """,
    tags=['account_management', 'datafeed_management', 'local_inventory_ads_settings'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_pos_delete(
    merchant_id: str = Path(..., alias='merchantId'),
    target_merchant_id: str = Path(..., alias='targetMerchantId'),
    store_code: str = Path(..., alias='storeCode'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/pos/{targetMerchantId}/store/{storeCode}',
    description=""" Retrieves information about the given store. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_pos_get(
    merchant_id: str = Path(..., alias='merchantId'),
    target_merchant_id: str = Path(..., alias='targetMerchantId'),
    store_code: str = Path(..., alias='storeCode'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/products',
    description=""" Lists the products in your Merchant Center account. The response might contain fewer items than specified by maxResults. Rely on nextPageToken to determine if there are more items to be requested. """,
    tags=['datafeed_management', 'content_data_feeds_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_products_list(
    merchant_id: str = Path(..., alias='merchantId'),
    include_invalid_inserted_items: Optional[bool] = Query(
        None, alias='includeInvalidInsertedItems'
    ),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/products',
    description=""" Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry. """,
    tags=[
        'datafeed_management',
        'content_data_feeds_management',
        'product_listing_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_products_insert(
    merchant_id: str = Path(..., alias='merchantId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Product = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{merchantId}/products/{productId}',
    description=""" Deletes a product from your Merchant Center account. """,
    tags=['product_listing_management', 'custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_products_delete(
    merchant_id: str = Path(..., alias='merchantId'),
    product_id: str = Path(..., alias='productId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/products/{productId}',
    description=""" Retrieves a product from your Merchant Center account. """,
    tags=['product_listing_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_products_get(
    merchant_id: str = Path(..., alias='merchantId'),
    product_id: str = Path(..., alias='productId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/productstatuses',
    description=""" Lists the statuses of the products in your Merchant Center account. """,
    tags=['account_management', 'datafeed_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_productstatuses_list(
    merchant_id: str = Path(..., alias='merchantId'),
    destinations: Optional[Destinations] = None,
    include_attributes: Optional[bool] = Query(None, alias='includeAttributes'),
    include_invalid_inserted_items: Optional[bool] = Query(
        None, alias='includeInvalidInsertedItems'
    ),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/productstatuses/{productId}',
    description=""" Gets the status of a product from your Merchant Center account. """,
    tags=['product_listing_management', 'content_data_feeds_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_productstatuses_get(
    merchant_id: str = Path(..., alias='merchantId'),
    product_id: str = Path(..., alias='productId'),
    destinations: Optional[Destinations] = None,
    include_attributes: Optional[bool] = Query(None, alias='includeAttributes'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/shippingsettings',
    description=""" Lists the shipping settings of the sub-accounts in your Merchant Center account. """,
    tags=[
        'account_management',
        'custom_batch_operations',
        'content_data_feeds_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_shippingsettings_list(
    merchant_id: str = Path(..., alias='merchantId'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/shippingsettings/{accountId}',
    description=""" Retrieves the shipping settings of the account. """,
    tags=['account_management', 'account_status_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_shippingsettings_get(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{merchantId}/shippingsettings/{accountId}',
    description=""" Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource. """,
    tags=['shipping_configuration_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_shippingsettings_update(
    merchant_id: str = Path(..., alias='merchantId'),
    account_id: str = Path(..., alias='accountId'),
    dry_run: Optional[bool] = Query(None, alias='dryRun'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: ShippingSettings = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/supportedCarriers',
    description=""" Retrieves supported carriers and carrier services for an account. """,
    tags=['account_management', 'account_status_handling', 'custom_batch_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_shippingsettings_getsupportedcarriers(
    merchant_id: str = Path(..., alias='merchantId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/supportedHolidays',
    description=""" Retrieves supported holidays for an account. """,
    tags=[
        'account_management',
        'account_status_handling',
        'account_tax_management',
        'datafeed_management',
        'custom_batch_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_shippingsettings_getsupportedholidays(
    merchant_id: str = Path(..., alias='merchantId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/supportedPickupServices',
    description=""" Retrieves supported pickup services for an account. """,
    tags=['account_management', 'account_status_handling', 'order_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_shippingsettings_getsupportedpickupservices(
    merchant_id: str = Path(..., alias='merchantId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/testorders',
    description=""" Sandbox only. Creates a test order. """,
    tags=['test_order_creation_and_management', 'order_processing'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_createtestorder(
    merchant_id: str = Path(..., alias='merchantId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersCreateTestOrderRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/testorders/{orderId}/advance',
    description=""" Sandbox only. Moves a test order from state "`inProgress`" to state "`pendingShipment`". """,
    tags=['order_processing', 'content_order_management_system'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_advancetestorder(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{merchantId}/testorders/{orderId}/cancelByCustomer',
    description=""" Sandbox only. Cancels a test order for customer-initiated cancellation. """,
    tags=[
        'order_processing',
        'content_order_management_system',
        'test_order_creation_and_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_canceltestorderbycustomer(
    merchant_id: str = Path(..., alias='merchantId'),
    order_id: str = Path(..., alias='orderId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: OrdersCancelTestOrderByCustomerRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{merchantId}/testordertemplates/{templateName}',
    description=""" Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox. """,
    tags=['account_management', 'datafeed_management', 'content_data_feeds_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def content_orders_gettestordertemplate(
    merchant_id: str = Path(..., alias='merchantId'),
    template_name: TemplateName = Path(..., alias='templateName'),
    country: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
